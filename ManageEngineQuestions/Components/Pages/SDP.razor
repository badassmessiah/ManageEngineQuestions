@page "/sdp"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager NavigationManager



<Back />
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="col">
                <p class="text-center">Choose ServiceDesk Hosting Model</p>
                <div class="d-flex justify-content-center align-items-center">
                    <select @bind="option" @bind:after="LoadQuestions" class="form-select me2">
                        <option value="On-Prem">On-Prem</option>
                        <option value="Cloud">Cloud</option>
                    </select>

                </div>
                @if (option == "On-Prem")
                {
                    <div class="mt-4">
                        @foreach (var question in questions)
                        {
                            <div class="row mb-3 align-items-center">
                                <div class="col-md-4">
                                    <strong>@question.Question</strong>
                                </div>
                                <div class="col-md-4">
                                    @if (question.Type == QuestionType.Text)
                                    {
                                        <input type="text" class="form-control" @bind="question.TextAnswer" />
                                    }
                                    else if (question.Type == QuestionType.Checkbox)
                                    {
                                        @foreach (var answer in question.CheckboxAnswers)
                                        {
                                            <div class="form-check">
                                                <input type="radio" name="question_@(questions.IndexOf(question))"
                                                    class="form-check-input" value="@answer" />
                                                <label class="form-check-label">@answer</label>
                                            </div>
                                        }
                                    }
                                    else if (question.Type == QuestionType.Dropdown)
                                    {
                                        <select class="form-select" @bind="question.TextAnswer">
                                            @foreach (var option in question.DropdownOptions)
                                            {
                                                <option value="@option">@option</option>
                                            }
                                        </select>
                                    }
                                </div>
                                <div class="col-md-4">
                                    <small>
                                        @string.Join(" ", question.Explanation.Split(' ').Take(6))...
                                        <button class="btn btn-link btn-sm"
                                            @onclick="@(() => ShowExplanation(question.Explanation))">Learn More</button>
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div>
                        your choice is Cloud
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string option = "On-Prem";
    private List<QuestionEntity> questions = new List<QuestionEntity>();

    protected override async Task OnInitializedAsync()
    {
        await LoadQuestions();

    }

    private async Task LoadQuestions()
    {
        try
        {
            var baseUri = NavigationManager.BaseUri;
            var jsonFile = option == "On-Prem" ? "sdp-on-prem.json" : "sdp-cloud.json";
            var jsonUri = $"{baseUri}data/{jsonFile}";
            var json = await Http.GetStringAsync(jsonUri);
            questions = JsonSerializer.Deserialize<List<QuestionEntity>>(json) ?? new List<QuestionEntity>();

            foreach (var question in questions)
            {
                if (question.Type == QuestionType.Dropdown &&
                string.IsNullOrEmpty(question.TextAnswer) &&
                question.DropdownOptions.Any())
                {
                    question.TextAnswer = question.DropdownOptions.First();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}

@if (showModal)
{
    <div class="modal show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @((MarkupString)FormatExplanationWithLinks(selectedExplanation))
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private bool showModal = false;
    private string selectedExplanation = "";

    private void ShowExplanation(string explanation)
    {
        selectedExplanation = explanation;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        selectedExplanation = "";
    }


    private string FormatExplanationWithLinks(string text)
    {
        var urlPattern = @"(https?:\/\/[^\s]+)";
        return System.Text.RegularExpressions.Regex.Replace(
        text,
        urlPattern,
        match => $"<a href=\"{match.Value}\" target=\"_blank\">{match.Value}</a>"
        );
    }
}