@page "/sdp"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager NavigationManager

<Back />
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="col">
                <p class="text-center">Choose ServiceDesk Hosting Model</p>
                <div class="d-flex justify-content-center align-items-center">
                    <select @bind="Option" class="form-select me-2">
                        <option value="On-Prem">On-Prem</option>
                        <option value="Cloud">Cloud</option>
                    </select>
                </div>
                @if (Option == "On-Prem")
                {
                    <div>
                        @foreach (var question in Questions)
                        {
                            <div class="row mt-3">
                                <div class="col-md-4">
                                    <p>@question.Question</p>
                                </div>
                                <div class="col-md-4">
                                    @if (question.Type == QuestionType.Text)
                                    {
                                        <input type="text" @bind="question.TextAnswer" class="form-control" />
                                    }
                                    else if (question.Type == QuestionType.Dropdown)
                                    {
                                        <select @bind="question.TextAnswer" class="form-select">
                                            @foreach (var option in question.DropdownOptions)
                                            {
                                                <option value="@option">@option</option>
                                            }
                                        </select>
                                    }
                                </div>
                                <div class="col-md-4">
                                    @if (!string.IsNullOrEmpty(question.Explanation))
                                    {
                                        <p>@TruncateExplanation(question.Explanation)
                                            @if (question.Explanation.Length > MaxExplanationLength)
                                            {
                                                <button class="btn btn-link p-0" @onclick="() => ShowExplanation(question.Explanation)">See more</button>
                                            }
                                        </p>
                                    }
                                </div>
                            </div>
                            
                            @if (question.ChildQuestionsByAnswer.ContainsKey(question.TextAnswer))
                            {
                                <div class="card mt-3">
                                    <div class="card-body">
                                        @foreach (var childQuestion in question.ChildQuestionsByAnswer[question.TextAnswer])
                                        {
                                            <div class="row mt-3">
                                                <div class="col-md-4">
                                                    <p>@childQuestion.Question</p>
                                                </div>
                                                <div class="col-md-4">
                                                    @if (childQuestion.Type == QuestionType.Text)
                                                    {
                                                        <input type="text" @bind="childQuestion.TextAnswer" class="form-control" />
                                                    }
                                                    else if (childQuestion.Type == QuestionType.Dropdown)
                                                    {
                                                        <select @bind="childQuestion.TextAnswer" class="form-select">
                                                            @foreach (var option in childQuestion.DropdownOptions)
                                                            {
                                                                <option value="@option">@option</option>
                                                            }
                                                        </select>
                                                    }
                                                </div>
                                                <div class="col-md-4">
                                                    @if (!string.IsNullOrEmpty(childQuestion.Explanation))
                                                    {
                                                        <p>@TruncateExplanation(childQuestion.Explanation)
                                                            @if (childQuestion.Explanation.Length > MaxExplanationLength)
                                                            {
                                                                <button class="btn btn-link p-0" @onclick="() => ShowExplanation(childQuestion.Explanation)">See more</button>
                                                            }
                                                        </p>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            @if (question.Question == "Do you require Enterprise Service Management?" && question.TextAnswer == "Yes")
                            {
                                <div class="d-flex align-items-center mt-2">
                                    <button class="btn btn-primary me-2" @onclick="() => AddESMInstance(question)">+</button>
                                    <button class="btn btn-secondary" @onclick="RemoveESMInstance">-</button>
                                </div>

                                <div class="accordion mt-3" id="esmAccordion">
                                    @foreach (var esmInstance in ESMInstances)
                                    {
                                        var instanceId = $"instance-{esmInstance.Id}";
                                        <div class="accordion-item">
                                            <h2 class="accordion-header" id="@($"heading-{instanceId}")">
                                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@instanceId" aria-expanded="false" aria-controls="@instanceId">
                                                    @esmInstance.Name
                                                </button>
                                            </h2>
                                            <div id="@instanceId" class="accordion-collapse collapse" aria-labelledby="@($"heading-{instanceId}")" data-bs-parent="#esmAccordion">
                                                <div class="accordion-body">
                                                    <input type="text" @bind="esmInstance.Name" placeholder="Instance Name" class="form-control mb-3" />
                                                    @foreach (var esmQuestion in esmInstance.Questions)
                                                    {
                                                        <div class="row mt-3">
                                                            <div class="col-md-4">
                                                                <p>@esmQuestion.Question</p>
                                                            </div>
                                                            <div class="col-md-4">
                                                                @if (esmQuestion.Type == QuestionType.Text)
                                                                {
                                                                    <input type="text" @bind="esmQuestion.TextAnswer" class="form-control" />
                                                                }
                                                                else if (esmQuestion.Type == QuestionType.Dropdown)
                                                                {
                                                                    <select @bind="esmQuestion.TextAnswer" class="form-select">
                                                                        @foreach (var option in esmQuestion.DropdownOptions)
                                                                        {
                                                                            <option value="@option">@option</option>
                                                                        }
                                                                    </select>
                                                                }
                                                            </div>
                                                            <div class="col-md-4">
                                                                @if (!string.IsNullOrEmpty(esmQuestion.Explanation))
                                                                {
                                                                    <p>@TruncateExplanation(esmQuestion.Explanation)
                                                                        @if (esmQuestion.Explanation.Length > MaxExplanationLength)
                                                                        {
                                                                            <button class="btn btn-link p-0" @onclick="() => ShowExplanation(esmQuestion.Explanation)">See more</button>
                                                                        }
                                                                    </p>
                                                                }
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                }
                else
                {
                    <div>
                        Your choice is Cloud
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (ShowExplanationModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseExplanationModal"></button>
                </div>
                <div class="modal-body">
                    <p>@CurrentExplanation</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseExplanationModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string Option { get; set; } = "On-Prem";
    private List<QuestionEntity> Questions { get; set; } = new();
    private List<ESMInstance> ESMInstances { get; set; } = new();
    private bool ShowExplanationModal { get; set; } = false;
    private string CurrentExplanation { get; set; } = string.Empty;
    private const int MaxExplanationLength = 35;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var baseUri = NavigationManager.BaseUri;
            var jsonFile = Option == "On-Prem" ? "sdp-on-prem.json" : "sdp-cloud.json";
            var jsonUri = $"{baseUri}data/{jsonFile}";
            var json = await Http.GetStringAsync(jsonUri);
            Questions = JsonSerializer.Deserialize<List<QuestionEntity>>(json) ?? new();

            SetDropdownDefaults(Questions);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void SetDropdownDefaults(List<QuestionEntity> questions)
    {
        foreach (var question in questions)
        {
            if (question.Type == QuestionType.Dropdown && string.IsNullOrEmpty(question.TextAnswer) && question.DropdownOptions.Count > 0)
            {
                question.TextAnswer = question.DropdownOptions[0];
            }

            if (question.ChildQuestionsByAnswer != null)
            {
                foreach (var childQuestions in question.ChildQuestionsByAnswer.Values)
                {
                    SetDropdownDefaults(childQuestions);
                }
            }
        }
    }

    private void ShowExplanation(string explanation)
    {
        CurrentExplanation = explanation;
        ShowExplanationModal = true;
    }

    private void CloseExplanationModal()
    {
        ShowExplanationModal = false;
    }

    private string TruncateExplanation(string explanation)
    {
        if (string.IsNullOrEmpty(explanation) || explanation.Length <= MaxExplanationLength)
            return explanation;
        return explanation.Substring(0, MaxExplanationLength) + "...";
    }

    private void AddESMInstance(QuestionEntity esmQuestion)
    {
        if (esmQuestion.ChildQuestionsByAnswer.TryGetValue("Yes", out var esmQuestions))
        {
            // Clone the questions to ensure each instance has its own set of questions
            var clonedQuestions = esmQuestions.Select(q => new QuestionEntity
            {
                Question = q.Question,
                Explanation = q.Explanation,
                Type = q.Type,
                TextAnswer = string.Empty,
                DropdownOptions = new List<string>(q.DropdownOptions),
                CheckboxAnswers = new List<string>(q.CheckboxAnswers),
                ChildQuestionsByAnswer = q.ChildQuestionsByAnswer.ToDictionary(entry => entry.Key, entry => entry.Value.Select(cq => new QuestionEntity
                {
                    Question = cq.Question,
                    Explanation = cq.Explanation,
                    Type = cq.Type,
                    TextAnswer = string.Empty,
                    DropdownOptions = new List<string>(cq.DropdownOptions),
                    CheckboxAnswers = new List<string>(cq.CheckboxAnswers)
                }).ToList())
            }).ToList();

            ESMInstances.Add(new ESMInstance { Id = Guid.NewGuid().ToString(), Questions = clonedQuestions });
        }
    }

    private void RemoveESMInstance()
    {
        if (ESMInstances.Any())
        {
            ESMInstances.RemoveAt(ESMInstances.Count - 1);
        }
    }
}