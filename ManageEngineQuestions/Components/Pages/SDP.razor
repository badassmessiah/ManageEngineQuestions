@page "/sdp"
@using System.Text
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
<Back />

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="col">
                <p class="text-center">Choose ServiceDesk Hosting Model</p>
                <div class="d-flex justify-content-center align-items-center">
                    <select @bind="Option" @bind:event="oninput" @onchange="OnOptionChanged" class="form-select me-2">
                        <option value="On-Prem">On-Prem</option>
                        <option value="Cloud">Cloud</option>
                    </select>
                </div>
                <div>
                    @foreach (var question in Questions)
                    {
                        <div class="row mt-3">
                            <div class="col-md-4 d-flex align-items-center">
                                <p>@question.Question</p>
                            </div>
                            <div class="col-md-4 d-flex align-items-center">
                                @if (question.Type == QuestionType.Text)
                                {
                                    <input type="text" @bind="question.TextAnswer" class="form-control" />
                                }
                                else if (question.Type == QuestionType.Dropdown)
                                {
                                    <select @bind="question.TextAnswer" class="form-select">
                                        @foreach (var option in question.DropdownOptions)
                                        {
                                            <option value="@option">@option</option>
                                        }
                                    </select>
                                }
                            </div>
                            <div class="col-md-4 d-flex align-items-center">
                                @if (!string.IsNullOrEmpty(question.Explanation))
                                {
                                    <p>@TruncateExplanation(question.Explanation)
                                        @if (question.Explanation.Length > MaxExplanationLength)
                                        {
                                            <button class="btn btn-link p-0" @onclick="() => ShowExplanation(question.Explanation)">See more</button>
                                        }
                                    </p>
                                }
                            </div>
                        </div>

                        @if (question.Question == "Do you require Enterprise Service Management?" && question.TextAnswer == "Yes")
                        {
                            @if (!ESMInstances.Any())
                            {
                                AddESMInstance();
                            }

                            <div class="d-flex align-items-center mt-2">
                                <button class="btn btn-primary me-2" @onclick="AddESMInstance">+</button>
                                <button class="btn btn-secondary" @onclick="RemoveESMInstance">-</button>
                            </div>

                            <div class="mt-3">
                                @foreach (var esmInstance in ESMInstances)
                                {
                                    <details class="mb-3">
                                        <summary class="btn btn-light w-100 text-start p-3 border rounded">
                                            @esmInstance.Name
                                            <span class="float-end">â–¼</span>
                                        </summary>
                                        <div class="border rounded-bottom p-3">
                                            <div class="mb-3">
                                                <input type="text" @bind="esmInstance.Name" @bind:event="oninput" placeholder="Instance Name" class="form-control" />
                                            </div>
                                            @foreach (var esmQuestion in esmInstance.Questions)
                                            {
                                                <div class="row mt-3">
                                                    <div class="col-md-4 d-flex align-items-center">
                                                        <p>@esmQuestion.Question</p>
                                                    </div>
                                                    <div class="col-md-4 d-flex align-items-center">
                                                        @if (esmQuestion.Type == QuestionType.Text)
                                                        {
                                                            <input type="text" @bind="esmQuestion.TextAnswer" class="form-control" />
                                                        }
                                                        else if (esmQuestion.Type == QuestionType.Dropdown)
                                                        {
                                                            <select @bind="esmQuestion.TextAnswer" class="form-select">
                                                                @foreach (var option in esmQuestion.DropdownOptions)
                                                                {
                                                                    <option value="@option">@option</option>
                                                                }
                                                            </select>
                                                        }
                                                    </div>
                                                    <div class="col-md-4 d-flex align-items-center">
                                                        @if (!string.IsNullOrEmpty(esmQuestion.Explanation))
                                                        {
                                                            <p>@TruncateExplanation(esmQuestion.Explanation)
                                                                @if (esmQuestion.Explanation.Length > MaxExplanationLength)
                                                                {
                                                                    <button class="btn btn-link p-0" @onclick="() => ShowExplanation(esmQuestion.Explanation)">See more</button>
                                                                }
                                                            </p>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </details>
                                }
                            </div>
                        }
                        else if (question.ChildQuestionsByAnswer.ContainsKey(question.TextAnswer) && question.ChildQuestionsByAnswer[question.TextAnswer]?.Any() == true)
                        {
                            <div class="p-3 border rounded">
                                @foreach (var childQuestion in question.ChildQuestionsByAnswer[question.TextAnswer])
                                {
                                    <div class="row mt-3">
                                        <div class="col-md-4 d-flex align-items-center">
                                            <p>@childQuestion.Question</p>
                                        </div>
                                        <div class="col-md-4 d-flex align-items-center">
                                            @if (childQuestion.Type == QuestionType.Text)
                                            {
                                                <input type="text" @bind="childQuestion.TextAnswer" class="form-control" />
                                            }
                                            else if (childQuestion.Type == QuestionType.Dropdown)
                                            {
                                                <select @bind="childQuestion.TextAnswer" class="form-select">
                                                    @foreach (var option in childQuestion.DropdownOptions)
                                                    {
                                                        <option value="@option">@option</option>
                                                    }
                                                </select>
                                            }
                                        </div>
                                        <div class="col-md-4 d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(childQuestion.Explanation))
                                            {
                                                <p>@TruncateExplanation(childQuestion.Explanation)
                                                    @if (childQuestion.Explanation.Length > MaxExplanationLength)
                                                    {
                                                        <button class="btn btn-link p-0" @onclick="() => ShowExplanation(childQuestion.Explanation)">See more</button>
                                                    }
                                                </p>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        
                    }
                </div>
                <button class="btn btn-primary mt-3" @onclick="DownloadCsv">Download Answers as CSV</button>
            </div>
        </div>
    </div>
</div>

@if (ShowExplanationModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseExplanationModal"></button>
                </div>
                <div class="modal-body">
                    <p>@CurrentExplanation</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseExplanationModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string Option { get; set; } = "On-Prem";
    private List<QuestionEntity> Questions { get; set; } = new();
    private List<ESMInstance> ESMInstances { get; set; } = new();
    private bool ShowExplanationModal { get; set; } = false;
    private string CurrentExplanation { get; set; } = string.Empty;
    private const int MaxExplanationLength = 40;
    private int MaxESMInstances => Option == "On-Prem" ? 15 : 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuestions();
    }

    private async Task OnOptionChanged()
    {
        ESMInstances.Clear();
        await LoadQuestions();
    }

    private async Task LoadQuestions()
    {
        try
        {
            var baseUri = NavigationManager.BaseUri;
            var jsonFile = Option == "On-Prem" ? "sdp-on-prem.json" : "sdp-cloud.json";
            var jsonUri = $"{baseUri}data/{jsonFile}";
            var json = await Http.GetStringAsync(jsonUri);
            Questions = JsonSerializer.Deserialize<List<QuestionEntity>>(json) ?? new();
            SetDropdownDefaults(Questions);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void SetDropdownDefaults(List<QuestionEntity> questions)
    {
        foreach (var question in questions)
        {
            if (question.Type == QuestionType.Dropdown && string.IsNullOrEmpty(question.TextAnswer) && question.DropdownOptions.Count > 0)
            {
                question.TextAnswer = question.DropdownOptions[0];
            }
            if (question.ChildQuestionsByAnswer != null)
            {
                foreach (var childQuestions in question.ChildQuestionsByAnswer.Values)
                {
                    SetDropdownDefaults(childQuestions);
                }
            }
        }
    }

    private void ShowExplanation(string explanation)
    {
        CurrentExplanation = explanation;
        ShowExplanationModal = true;
    }

    private void CloseExplanationModal()
    {
        ShowExplanationModal = false;
        CurrentExplanation = string.Empty;
    }

    private void AddESMInstance()
    {
        if (ESMInstances.Count < MaxESMInstances)
        {
            var newESMInstance = new ESMInstance
            {
                Id = (ESMInstances.Count + 1).ToString(),
                Name = $"ESM Instance {ESMInstances.Count + 1}",
                Questions = GetESMQuestions()
            };
            ESMInstances.Add(newESMInstance);
        }
    }

    private void RemoveESMInstance()
    {
        if (ESMInstances.Any())
        {
            ESMInstances.RemoveAt(ESMInstances.Count - 1);
        }
    }

    private List<QuestionEntity> GetESMQuestions()
    {
        var esmQuestion = Questions.FirstOrDefault(q => q.Question == "Do you require Enterprise Service Management?");
        if (esmQuestion != null && esmQuestion.ChildQuestionsByAnswer.ContainsKey("Yes"))
        {
            return esmQuestion.ChildQuestionsByAnswer["Yes"];
        }
        return new List<QuestionEntity>();
    }

    private string TruncateExplanation(string explanation)
    {
        if (explanation.Length > MaxExplanationLength)
        {
            return explanation.Substring(0, MaxExplanationLength) + "...";
        }
        return explanation;
    }

    private List<(string Question, string Answer)> GetAllAnswers()
    {
        var answers = new List<(string Question, string Answer)>();
        
        // Collect answers from main questions
        answers.AddRange(CollectAnswers(Questions));
        
        // Collect answers from ESM instances if any
        foreach (var esmInstance in ESMInstances)
        {
            // Add the instance name as a separate entry
            answers.Add(($"ESM Instance: {esmInstance.Name}", ""));
            answers.AddRange(CollectAnswers(esmInstance.Questions));
        }
        
        return answers;
    }

    private List<(string Question, string Answer)> CollectAnswers(List<QuestionEntity> questions)
    {
        var answers = new List<(string Question, string Answer)>();
        foreach (var question in questions)
        {
            answers.Add((question.Question, question.TextAnswer));
            if (question.ChildQuestionsByAnswer != null &&
                question.ChildQuestionsByAnswer.ContainsKey(question.TextAnswer))
            {
                var childQuestions = question.ChildQuestionsByAnswer[question.TextAnswer];
                answers.AddRange(CollectAnswers(childQuestions));
            }
        }
        return answers;
    }
    private string GenerateCsvContent(List<(string Question, string Answer)> answers)
    {
        var csvBuilder = new StringBuilder();
        csvBuilder.AppendLine("Question,Answer");
        foreach (var (question, answer) in answers)
        {
            var escapedQuestion = question.Replace("\"", "\"\"").Replace("\n", " ");
            var escapedAnswer = answer.Replace("\"", "\"\"").Replace("\n", " ");
            csvBuilder.AppendLine($"\"{escapedQuestion}\",\"{escapedAnswer}\"");
        }
        return csvBuilder.ToString();
    }
    private async Task DownloadCsv()
    {
        var answers = GetAllAnswers();
        var csvContent = GenerateCsvContent(answers);
        var bytes = Encoding.UTF8.GetBytes(csvContent);
        var base64 = Convert.ToBase64String(bytes);

        await JS.InvokeVoidAsync("downloadFile", $"SDP {Option}.csv", base64);
    }
}