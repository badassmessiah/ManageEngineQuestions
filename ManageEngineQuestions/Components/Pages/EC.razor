@page "/ec"
@using System.Text
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
<Back />
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="col">
                <p class="text-center">Choose EndpointCentral Hosting Model</p>
                <div class="d-flex justify-content-center align-items-center">
                    <select @bind="Option" @bind:event="oninput" @onchange="OnOptionChanged" class="form-select me-2">
                        <option value="On-Prem">On-Prem</option>
                        <option value="Cloud">Cloud</option>
                    </select>
                </div>
                <div>
                    @foreach (var question in Questions)
                    {
                        <QuestionComponent Question="question" ShowExplanation="ShowExplanation" />
                    }
                </div>
                <button class="btn btn-primary mt-3" @onclick="DownloadCsv">Download Answers as CSV</button>
            </div>
        </div>
    </div>
</div>
<style>
    .preserve-whitespace {
        white-space: pre-wrap;
    }
</style>
@if (ShowExplanationModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseExplanationModal"></button>
                </div>
                <div class="modal-body">
                    <p class="preserve-whitespace">@CurrentExplanation</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseExplanationModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>

        
}
@code {
    private string Option = "On-Prem";
    private List<QuestionEntity> Questions { get; set; } = new();
    private bool ShowExplanationModal { get; set; } = false;
    private string CurrentExplanation { get; set; } = string.Empty;
    private const int MaxExplanationLength = 40;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuestions();
    }

    private void ShowExplanation(string explanation)
    {
        CurrentExplanation = explanation;
        ShowExplanationModal = true;
    }

    private void CloseExplanationModal()
    {
        ShowExplanationModal = false;
        CurrentExplanation = string.Empty;
    }
    private async Task OnOptionChanged()
    {
        await LoadQuestions();
    }
    
    private string TruncateExplanation(string explanation)
    {
        if (explanation.Length > MaxExplanationLength)
        {
            return explanation.Substring(0, MaxExplanationLength) + "...";
        }
        return explanation;
    }
    public async Task LoadQuestions()
    {
        try
        {
            var baseUri = NavigationManager.BaseUri;
            var jsonFile = Option == "On-Prem" ? "ec-on-prem.json" : "ec-cloud.json";
            var jsonUri = $"{baseUri}data/{jsonFile}";
            var json = await Http.GetStringAsync(jsonUri);
            Questions = JsonSerializer.Deserialize<List<QuestionEntity>>(json) ?? new();
            SetDropdownDefaults(Questions);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void SetDropdownDefaults(List<QuestionEntity> questions)
    {
        foreach (var question in questions)
        {
            if (question.Type == QuestionType.Dropdown && string.IsNullOrEmpty(question.TextAnswer) &&
            question.DropdownOptions.Count > 0)
            {
                question.TextAnswer = question.DropdownOptions[0];
            }
            if (question.ChildQuestionsByAnswer != null)
            {
                foreach (var childQuestions in question.ChildQuestionsByAnswer.Values)
                {
                    SetDropdownDefaults(childQuestions);
                }
            }
        }
    }

    private List<(string Question, string Answer)> GetAllAnswers(List<QuestionEntity> questions)
    {
        var answers = new List<(string Question, string Answer)>();

        foreach (var question in questions)
        {
            answers.Add((question.Question, question.TextAnswer));

            if (question.ChildQuestionsByAnswer != null &&
            question.ChildQuestionsByAnswer.ContainsKey(question.TextAnswer))
            {
                var childQuestions = question.ChildQuestionsByAnswer[question.TextAnswer];
                answers.AddRange(GetAllAnswers(childQuestions));
            }
        }

        return answers;
    }

    private string GenerateCsvContent(List<(string Question, string Answer)> answers)
    {
        var csvBuilder = new StringBuilder();
        csvBuilder.AppendLine("Question,Answer");

        foreach (var (question, answer) in answers)
        {
            var escapedQuestion = question.Replace("\"", "\"\"").Replace("\n", " ");
            var escapedAnswer = answer.Replace("\"", "\"\"").Replace("\n", " ");
            csvBuilder.AppendLine($"\"{escapedQuestion}\",\"{escapedAnswer}\"");
        }

        return csvBuilder.ToString();
    }

    private async Task DownloadCsv()
    {
        var answers = GetAllAnswers(Questions);
        var csvContent = GenerateCsvContent(answers);
        var bytes = Encoding.UTF8.GetBytes(csvContent);
        var base64 = Convert.ToBase64String(bytes);

        await JS.InvokeVoidAsync("downloadFile",Option + " answers.csv", base64);
    }
}